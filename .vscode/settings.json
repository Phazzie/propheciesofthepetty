{
  "security.workspace.trust.untrustedFiles": "open",
  "github.copilot.chat.editor.temporalContext.enabled": true,
  "github.copilot.chat.enableUserPreferences": true,
  "github.copilot.chat.generateTests.codeLens": true,
  "github.copilot.chat.languageContext.typescript.enabled": true,
  "github.copilot.nextEditSuggestions.enabled": true,
  "github.copilot.chat.commitMessageGeneration.instructions":,
  "github.copilot.chat.reviewSelection.instructions":,
  "github.copilot.chat.customInstructions": "## Passive-Aggressive Tarot Card Reading System Project Guidelines\n\nThese guidelines ensure high-quality, maintainable code for our Tarot card reading system. Adhere to these principles when generating code:\n\n**I. Core Principles**\n\n* **Atomic Features:** Deliver complete, tested, and deployable units of code. Break down large features into smaller, independent components.\n* **Test-Driven Development (TDD):** Write tests before code, aiming for 85% or higher meaningful test coverage. Focus on critical paths and edge cases.\n* **Strict TypeScript:** Enforce type safety by avoiding the 'any' type and preventing circular dependencies.\n* **Performance:** Optimize for speed, particularly in user-facing components. Target render times under 100ms in critical areas and ensure efficient data access.\n* **Error Handling:** Implement robust error handling with clear user messages and detailed logs for debugging.\n* **Accessibility:** Adhere to WCAG AA accessibility standards to ensure inclusivity for all users.\n\n**II. Workflow**\n\n* **Daily Review:** Before starting work, review project status files (e.g., `TEST_STATUS.md`, `BLOCKERS.md`, `ROADMAP.md`) to prioritize tasks and identify potential roadblocks.\n* **TDD Implementation:** Follow a strict TDD process: write tests, implement code, handle errors, and document.\n* **Validation:** Before committing code, ensure all tests pass, performance targets are met, and type checking is successful.\n* **Continuous Monitoring:** Regularly track performance metrics, error rates, and test coverage. Address any regressions immediately.\n\n**III. Focus Areas**\n\n* **Reading System:**\n    * **Shade Level™ (0-100 Scale):** Implement thorough testing for the Shade Level™ feature, including exhaustive edge case testing with documented tests.\n    * **Score Normalization (0-100):** Ensure consistent scoring across all card types through rigorous validation.\n    * **Card Render Performance:** Optimize card rendering to achieve a target of <100ms. Utilize benchmarks and monitoring to track performance.\n* **Authentication System:**\n    * **Integration Tests:** Implement comprehensive integration tests with a focus on security aspects.\n    * **Error Handling and Logging:** Prioritize robust error handling and detailed security logging for enhanced debuggability.\n* **UI Components:**\n    * **Loading and Error States:** Implement loading and error states for every component to provide a consistent user experience.\n    * **Accessibility:** Design components with accessibility in mind, adhering to WCAG AA standards. Document accessibility considerations for each component.\n    * **Performance Optimization:** Optimize the performance of all UI components through proactive profiling and optimization techniques.\n* **Documentation:**\n    * **Living Documentation:** Maintain up-to-date and comprehensive documentation, including inline code comments, type definitions, test descriptions, architectural overviews, and performance details.\n\n**IV. Success Metrics**\n\n* **Technical Quality:** Achieve high test coverage (85%+), eliminate flaky tests, and maintain 100% type safety.\n* **Performance:** Meet performance targets, particularly for card rendering (<100ms) and data access efficiency.\n* **Completion:** Deliver consistently atomic features with comprehensive error handling and up-to-date documentation."
}
